$date
	Sat Nov 12 16:07:52 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " zero_xm $end
$var wire 1 # zero $end
$var wire 5 $ write_reg_xm [4:0] $end
$var wire 5 % write_reg_mb [4:0] $end
$var wire 5 & write_reg [4:0] $end
$var wire 32 ' write_data [31:0] $end
$var wire 32 ( simm [31:0] $end
$var wire 32 ) rt_value_xm [31:0] $end
$var wire 32 * rt_value_ix [31:0] $end
$var wire 32 + rt_value [31:0] $end
$var wire 5 , rt_ix [4:0] $end
$var wire 32 - rs_value_ix [31:0] $end
$var wire 32 . rs_value [31:0] $end
$var wire 5 / rs_ix [4:0] $end
$var wire 32 0 result_xm [31:0] $end
$var wire 32 1 result_mb [31:0] $end
$var wire 1 2 reg_write_xm $end
$var wire 1 3 reg_write_mb $end
$var wire 1 4 reg_write_ix $end
$var wire 1 5 reg_write $end
$var wire 1 6 reg_dst_ix $end
$var wire 1 7 reg_dst $end
$var wire 32 8 read_data_mb [31:0] $end
$var wire 32 9 read_data [31:0] $end
$var wire 5 : rd_ix [4:0] $end
$var wire 1 ; pcwrite $end
$var wire 1 < pc_src $end
$var wire 32 = pc_out [31:0] $end
$var wire 32 > pc_next_ix [31:0] $end
$var wire 32 ? pc_next_fd [31:0] $end
$var wire 32 @ pc_next [31:0] $end
$var wire 32 A pc_in [31:0] $end
$var wire 32 B op2data [31:0] $end
$var wire 32 C op1data [31:0] $end
$var wire 4 D op [3:0] $end
$var wire 2 E muxop2 [1:0] $end
$var wire 2 F muxop1 [1:0] $end
$var wire 32 G mux_br_out [31:0] $end
$var wire 1 H mem_write_xm $end
$var wire 1 I mem_write_ix $end
$var wire 1 J mem_write $end
$var wire 1 K mem_to_reg_xm $end
$var wire 1 L mem_to_reg_mb $end
$var wire 1 M mem_to_reg_ix $end
$var wire 1 N mem_to_reg $end
$var wire 1 O mem_read_xm $end
$var wire 1 P mem_read_ix $end
$var wire 1 Q mem_read $end
$var wire 1 R jump_xm $end
$var wire 1 S jump_ix $end
$var wire 32 T jump_addr32 [31:0] $end
$var wire 28 U jump_addr [27:0] $end
$var wire 1 V jump $end
$var wire 32 W instruction_fd [31:0] $end
$var wire 32 X instruction [31:0] $end
$var wire 32 Y imm_ix [31:0] $end
$var wire 32 Z imm [31:0] $end
$var wire 1 [ ifidWrite $end
$var wire 1 \ hazardbit $end
$var wire 1 ] hazardRegWrite $end
$var wire 1 ^ hazardRegDst $end
$var wire 1 _ hazardMemtoReg $end
$var wire 1 ` hazardMemWrite $end
$var wire 1 a hazardMemRead $end
$var wire 1 b hazardJump $end
$var wire 1 c hazardBranch $end
$var wire 1 d hazardAluSrc $end
$var wire 2 e hazardAluOp [1:0] $end
$var wire 1 f controlmuxbit $end
$var wire 1 g branch_xm $end
$var wire 1 h branch_ix $end
$var wire 32 i branch_addr_xm [31:0] $end
$var wire 32 j branch_addr [31:0] $end
$var wire 1 k branch $end
$var wire 1 l alu_src_ix $end
$var wire 1 m alu_src $end
$var wire 32 n alu_result [31:0] $end
$var wire 2 o alu_op_ix [1:0] $end
$var wire 2 p alu_op [1:0] $end
$var wire 32 q alu_b [31:0] $end
$scope module FU $end
$var wire 5 r MEM_WB_rd [4:0] $end
$var wire 1 3 MEM_WB_RegWrite $end
$var wire 5 s ID_EX_rt [4:0] $end
$var wire 5 t ID_EX_rs [4:0] $end
$var wire 5 u EX_MEM_rd [4:0] $end
$var wire 1 2 EX_MEM_RegWrite $end
$var reg 2 v Operand1_MUX [1:0] $end
$var reg 2 w Operand2_MUX [1:0] $end
$upscope $end
$scope module HD $end
$var wire 5 x IF_ID_rs [4:0] $end
$var wire 5 y IF_ID_rt [4:0] $end
$var wire 5 z ID_EX_rt [4:0] $end
$var wire 1 P ID_EX_MemRead $end
$var reg 1 f ControlMuxBit $end
$var reg 1 \ HazardBit $end
$var reg 1 [ IF_ID_write $end
$var reg 1 ; PCWrite $end
$upscope $end
$scope module alu $end
$var wire 1 # zero $end
$var wire 4 { op [3:0] $end
$var wire 32 | b [31:0] $end
$var wire 32 } a [31:0] $end
$var reg 32 ~ c [31:0] $end
$upscope $end
$scope module alu_control $end
$var wire 6 !" funct [5:0] $end
$var wire 2 "" alu_op [1:0] $end
$var reg 4 #" alu_control [3:0] $end
$upscope $end
$scope module and_branch $end
$var wire 1 " b $end
$var wire 1 g a $end
$var reg 1 < result $end
$upscope $end
$scope module branch_adder $end
$var wire 32 $" out [31:0] $end
$var wire 32 %" in2 [31:0] $end
$var wire 32 &" in1 [31:0] $end
$upscope $end
$scope module control $end
$var wire 6 '" opcode [5:0] $end
$var reg 2 (" alu_op [1:0] $end
$var reg 1 m alu_src $end
$var reg 1 k branch $end
$var reg 1 V jump $end
$var reg 1 Q mem_read $end
$var reg 1 N mem_to_reg $end
$var reg 1 J mem_write $end
$var reg 1 7 reg_dst $end
$var reg 1 5 reg_write $end
$upscope $end
$scope module dmem $end
$var wire 1 ! clk $end
$var wire 32 )" write_data [31:0] $end
$var wire 32 *" read_data [31:0] $end
$var wire 1 H mem_write $end
$var wire 1 O mem_read $end
$var wire 32 +" address [31:0] $end
$upscope $end
$scope module hazard_aluop $end
$var wire 1 f flag $end
$var wire 2 ," in1 [1:0] $end
$var wire 2 -" in2 [1:0] $end
$var wire 2 ." out [1:0] $end
$upscope $end
$scope module hazard_alusrc $end
$var wire 1 f flag $end
$var wire 1 m in1 $end
$var wire 1 /" in2 $end
$var wire 1 d out $end
$upscope $end
$scope module hazard_branch $end
$var wire 1 f flag $end
$var wire 1 k in1 $end
$var wire 1 0" in2 $end
$var wire 1 c out $end
$upscope $end
$scope module hazard_jump $end
$var wire 1 f flag $end
$var wire 1 V in1 $end
$var wire 1 1" in2 $end
$var wire 1 b out $end
$upscope $end
$scope module hazard_mem_read $end
$var wire 1 f flag $end
$var wire 1 Q in1 $end
$var wire 1 2" in2 $end
$var wire 1 a out $end
$upscope $end
$scope module hazard_memtoreg $end
$var wire 1 f flag $end
$var wire 1 N in1 $end
$var wire 1 3" in2 $end
$var wire 1 _ out $end
$upscope $end
$scope module hazard_memwrite $end
$var wire 1 f flag $end
$var wire 1 J in1 $end
$var wire 1 4" in2 $end
$var wire 1 ` out $end
$upscope $end
$scope module hazard_regdst $end
$var wire 1 f flag $end
$var wire 1 7 in1 $end
$var wire 1 5" in2 $end
$var wire 1 ^ out $end
$upscope $end
$scope module hazard_regwrite $end
$var wire 1 f flag $end
$var wire 1 5 in1 $end
$var wire 1 6" in2 $end
$var wire 1 ] out $end
$upscope $end
$scope module imem $end
$var wire 32 7" read_data [31:0] $end
$var wire 32 8" address [31:0] $end
$var integer 32 9" i [31:0] $end
$upscope $end
$scope module mux_alu $end
$var wire 32 :" out [31:0] $end
$var wire 32 ;" in2 [31:0] $end
$var wire 32 <" in1 [31:0] $end
$var wire 1 l flag $end
$upscope $end
$scope module mux_alu_op1 $end
$var wire 2 =" flag [1:0] $end
$var wire 32 >" in3 [31:0] $end
$var wire 32 ?" in2 [31:0] $end
$var wire 32 @" in1 [31:0] $end
$var reg 32 A" out [31:0] $end
$upscope $end
$scope module mux_alu_op2 $end
$var wire 2 B" flag [1:0] $end
$var wire 32 C" in3 [31:0] $end
$var wire 32 D" in2 [31:0] $end
$var wire 32 E" in1 [31:0] $end
$var reg 32 F" out [31:0] $end
$upscope $end
$scope module mux_branch $end
$var wire 1 < flag $end
$var wire 32 G" out [31:0] $end
$var wire 32 H" in2 [31:0] $end
$var wire 32 I" in1 [31:0] $end
$upscope $end
$scope module mux_jump $end
$var wire 32 J" in1 [31:0] $end
$var wire 32 K" in2 [31:0] $end
$var wire 32 L" out [31:0] $end
$var wire 1 R flag $end
$upscope $end
$scope module mux_mem $end
$var wire 32 M" out [31:0] $end
$var wire 32 N" in2 [31:0] $end
$var wire 32 O" in1 [31:0] $end
$var wire 1 L flag $end
$upscope $end
$scope module mux_reg $end
$var wire 5 P" out [4:0] $end
$var wire 5 Q" in2 [4:0] $end
$var wire 5 R" in1 [4:0] $end
$var wire 1 6 flag $end
$upscope $end
$scope module pc $end
$var wire 1 ; PCWrite $end
$var wire 1 ! clk $end
$var wire 32 S" in [31:0] $end
$var wire 32 T" out [31:0] $end
$var reg 32 U" pc [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 V" in1 [31:0] $end
$var wire 32 W" in2 [31:0] $end
$var wire 32 X" out [31:0] $end
$upscope $end
$scope module reg_fd_1 $end
$var wire 1 [ IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 Y" in [31:0] $end
$var reg 32 Z" out [31:0] $end
$upscope $end
$scope module reg_fd_2 $end
$var wire 1 [ IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 [" in [31:0] $end
$var reg 32 \" out [31:0] $end
$upscope $end
$scope module reg_ix_aluOp $end
$var wire 1 ]" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 2 ^" in [1:0] $end
$var reg 2 _" out [1:0] $end
$upscope $end
$scope module reg_ix_aluSrc $end
$var wire 1 `" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 d in $end
$var reg 1 l out $end
$upscope $end
$scope module reg_ix_branch $end
$var wire 1 a" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 c in $end
$var reg 1 h out $end
$upscope $end
$scope module reg_ix_imm $end
$var wire 1 b" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 c" in [31:0] $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module reg_ix_jump $end
$var wire 1 e" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 b in $end
$var reg 1 S out $end
$upscope $end
$scope module reg_ix_memRead $end
$var wire 1 f" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 a in $end
$var reg 1 P out $end
$upscope $end
$scope module reg_ix_memToReg $end
$var wire 1 g" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 _ in $end
$var reg 1 M out $end
$upscope $end
$scope module reg_ix_memWrite $end
$var wire 1 h" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 ` in $end
$var reg 1 I out $end
$upscope $end
$scope module reg_ix_pc $end
$var wire 1 i" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 j" in [31:0] $end
$var reg 32 k" out [31:0] $end
$upscope $end
$scope module reg_ix_rd $end
$var wire 1 l" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 m" in [4:0] $end
$var reg 5 n" out [4:0] $end
$upscope $end
$scope module reg_ix_readData1 $end
$var wire 1 o" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 p" in [31:0] $end
$var reg 32 q" out [31:0] $end
$upscope $end
$scope module reg_ix_readData2 $end
$var wire 1 r" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 s" in [31:0] $end
$var reg 32 t" out [31:0] $end
$upscope $end
$scope module reg_ix_regDst $end
$var wire 1 u" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 ^ in $end
$var reg 1 6 out $end
$upscope $end
$scope module reg_ix_regWrite $end
$var wire 1 v" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 ] in $end
$var reg 1 4 out $end
$upscope $end
$scope module reg_ix_rs $end
$var wire 1 w" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 x" in [4:0] $end
$var reg 5 y" out [4:0] $end
$upscope $end
$scope module reg_ix_rt $end
$var wire 1 z" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 {" in [4:0] $end
$var reg 5 |" out [4:0] $end
$upscope $end
$scope module reg_mw_alu $end
$var wire 1 }" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 ~" in [31:0] $end
$var reg 32 !# out [31:0] $end
$upscope $end
$scope module reg_mw_memToReg $end
$var wire 1 "# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 K in $end
$var reg 1 L out $end
$upscope $end
$scope module reg_mw_readData $end
$var wire 1 ## IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 $# in [31:0] $end
$var reg 32 %# out [31:0] $end
$upscope $end
$scope module reg_mw_regWrite $end
$var wire 1 &# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 2 in $end
$var reg 1 3 out $end
$upscope $end
$scope module reg_mw_writeReg $end
$var wire 1 '# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 (# in [4:0] $end
$var reg 5 )# out [4:0] $end
$upscope $end
$scope module reg_xm_alu $end
$var wire 1 *# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 +# in [31:0] $end
$var reg 32 ,# out [31:0] $end
$upscope $end
$scope module reg_xm_branch $end
$var wire 1 -# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 h in $end
$var reg 1 g out $end
$upscope $end
$scope module reg_xm_branchAddr $end
$var wire 1 .# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 /# in [31:0] $end
$var reg 32 0# out [31:0] $end
$upscope $end
$scope module reg_xm_jump $end
$var wire 1 1# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 S in $end
$var reg 1 R out $end
$upscope $end
$scope module reg_xm_memRead $end
$var wire 1 2# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 P in $end
$var reg 1 O out $end
$upscope $end
$scope module reg_xm_memToReg $end
$var wire 1 3# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 M in $end
$var reg 1 K out $end
$upscope $end
$scope module reg_xm_memWrite $end
$var wire 1 4# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 I in $end
$var reg 1 H out $end
$upscope $end
$scope module reg_xm_readData2 $end
$var wire 1 5# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 6# in [31:0] $end
$var reg 32 7# out [31:0] $end
$upscope $end
$scope module reg_xm_regWrite $end
$var wire 1 8# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 4 in $end
$var reg 1 2 out $end
$upscope $end
$scope module reg_xm_writeReg $end
$var wire 1 9# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 :# in [4:0] $end
$var reg 5 ;# out [4:0] $end
$upscope $end
$scope module reg_xm_zero $end
$var wire 1 <# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 # in $end
$var reg 1 " out $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 =# rd_address [4:0] $end
$var wire 32 ># rd_value [31:0] $end
$var wire 1 3 reg_write $end
$var wire 5 ?# rs_address [4:0] $end
$var wire 32 @# rs_value [31:0] $end
$var wire 5 A# rt_address [4:0] $end
$var wire 32 B# rt_value [31:0] $end
$upscope $end
$scope module shift_branch $end
$var wire 32 C# in [31:0] $end
$var wire 32 D# out [31:0] $end
$upscope $end
$scope module shift_jump $end
$var wire 26 E# in [25:0] $end
$var wire 28 F# out [27:0] $end
$upscope $end
$scope module signextend $end
$var wire 16 G# in [15:0] $end
$var wire 32 H# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
b0 ?#
b0 >#
b0 =#
1<#
b0 ;#
b0 :#
19#
18#
b0 7#
b0 6#
15#
14#
13#
12#
11#
b0 0#
b0 /#
1.#
1-#
b0 ,#
b0 +#
1*#
b0 )#
b0 (#
1'#
1&#
b0 %#
bx $#
1##
1"#
b0 !#
b0 ~"
1}"
b0 |"
b0 {"
1z"
b0 y"
b0 x"
1w"
1v"
1u"
b0 t"
b0 s"
1r"
b0 q"
b0 p"
1o"
b0 n"
b0 m"
1l"
b0 k"
b0 j"
1i"
1h"
1g"
1f"
1e"
b0 d"
b0 c"
1b"
1a"
1`"
b0 _"
b10 ^"
1]"
b0 \"
b100000000010000000000000001010 ["
b0 Z"
b100 Y"
b100 X"
b100 W"
b0 V"
b0 U"
b0 T"
b100 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b100 L"
b0 K"
b100 J"
b100 I"
b0 H"
b100 G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b100000000 9"
b0 8"
b100000000010000000000000001010 7"
06"
05"
04"
03"
02"
01"
00"
0/"
b10 ."
b0 -"
b10 ,"
b0 +"
bx *"
b0 )"
b10 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b10 p
b0 o
b0 n
0m
0l
0k
b0 j
b0 i
0h
0g
0f
b10 e
0d
0c
0b
0a
0`
0_
1^
1]
0\
1[
b0 Z
b0 Y
b100000000010000000000000001010 X
b0 W
0V
b0 U
b0 T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
b100 G
b0 F
b0 E
b0 D
b0 C
b0 B
b100 A
b100 @
b0 ?
b0 >
b0 =
0<
1;
b0 :
bx 9
b0 8
17
06
15
04
03
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
1#
0"
0!
$end
#5
b11 e
b11 ."
b11 ^"
1d
0^
b11 p
b11 ("
b11 ,"
1m
07
b1000 A
b1000 L"
b1000 S"
b1000000000000000101000 T
b1000000000000000101000 K"
b1000000000000000101000 U
b1000000000000000101000 F#
b1000 G
b1000 G"
b1000 J"
b100000000010010000000000001000 X
b100000000010010000000000001000 7"
b100000000010010000000000001000 ["
b1000 {"
b1010 Z
b1010 c"
b1010 H#
b1010 G#
bx +
bx s"
bx B#
b1000 A#
b1000 '"
b10000000000000001010 E#
b1000 y
b1000 @
b1000 I"
b1000 X"
b1000 Y"
b100 =
b100 8"
b100 T"
b100 U"
b100 V"
b100 ?
b100 Z"
b100 j"
b100000000010000000000000001010 W
b100000000010000000000000001010 \"
16
b10 o
b10 ""
b10 _"
14
1"
bx 8
bx N"
bx %#
1!
#10
0!
#15
0#
b1010 n
b1010 ~
b1010 +#
bx B
bx <"
bx F"
b1001000000000000100000 T
b1001000000000000100000 K"
b1001000000000000100000 U
b1001000000000000100000 F#
b1100 A
b1100 L"
b1100 S"
b101000 (
b101000 %"
b101000 D#
b1010 !"
b1010 q
b1010 |
b1010 :"
b1000 &
b1000 P"
b1000 :#
b1001 {"
b1000 Z
b1000 c"
b1000 H#
b1000 G#
b1001 A#
b10010000000000001000 E#
b1001 y
b1100 G
b1100 G"
b1100 J"
b1000010010101000000100101 X
b1000010010101000000100101 7"
b1000010010101000000100101 ["
12
b1000 ,
b1000 s
b1000 z
b1000 R"
b1000 |"
b1010 Y
b1010 ;"
b1010 d"
b1010 C#
bx *
bx E"
bx t"
bx 6#
b101100 j
b101100 $"
b101100 /#
b100 >
b100 &"
b100 k"
1l
b11 o
b11 ""
b11 _"
06
b100000000010010000000000001000 W
b100000000010010000000000001000 \"
b1000 ?
b1000 Z"
b1000 j"
b1100 @
b1100 I"
b1100 X"
b1100 Y"
b1000 =
b1000 8"
b1000 T"
b1000 U"
b1000 V"
1!
#20
0!
#25
b10 e
b10 ."
b10 ^"
0d
1^
b10 p
b10 ("
b10 ,"
0m
17
b1000 n
b1000 ~
b1000 +#
b10000 A
b10000 L"
b10000 S"
b100001001010100000010010100 T
b100001001010100000010010100 K"
b100001001010100000010010100 U
b100001001010100000010010100 F#
b10000 G
b10000 G"
b10000 J"
b100000000010010000000000000001 X
b100000000010010000000000000001 7"
b100000000010010000000000000001 ["
b1010 m"
b1000 x"
b101000000100101 Z
b101000000100101 c"
b101000000100101 H#
b101000000100101 G#
bx .
bx p"
bx @#
b1000 ?#
b0 '"
b1000010010101000000100101 E#
b1000 x
b100000 (
b100000 %"
b100000 D#
b1000 q
b1000 |
b1000 :"
b1000 !"
b1001 &
b1001 P"
b1001 :#
b10000 @
b10000 I"
b10000 X"
b10000 Y"
b1100 =
b1100 8"
b1100 T"
b1100 U"
b1100 V"
b1100 ?
b1100 Z"
b1100 j"
b1000010010101000000100101 W
b1000010010101000000100101 \"
b101000 j
b101000 $"
b101000 /#
b1000 >
b1000 &"
b1000 k"
b1000 Y
b1000 ;"
b1000 d"
b1000 C#
b1001 ,
b1001 s
b1001 z
b1001 R"
b1001 |"
b101100 i
b101100 H"
b101100 0#
0"
b1010 0
b1010 +"
b1010 ?"
b1010 D"
b1010 ~"
b1010 ,#
bx )
bx )"
bx 7#
b1000 $
b1000 u
b1000 (#
b1000 ;#
13
1!
#30
0!
#35
b11 e
b11 ."
b11 ^"
1d
0^
b101 D
b101 {
b101 #"
0#
b1010 n
b1010 ~
b1010 +#
b11 p
b11 ("
b11 ,"
1m
07
b1000 B
b1000 <"
b1000 F"
b1010 C
b1010 }
b1010 A"
b1001000000000000000100 T
b1001000000000000000100 K"
b1001000000000000000100 U
b1001000000000000000100 F#
b10100 A
b10100 L"
b10100 S"
b1010 '
b1010 >"
b1010 C"
b1010 M"
b1010 >#
b1 E
b1 w
b1 B"
b10 F
b10 v
b10 ="
b10100000010010100 (
b10100000010010100 %"
b10100000010010100 D#
b100101 !"
b1000 q
b1000 |
b1000 :"
b1010 &
b1010 P"
b1010 :#
b0 m"
b0 x"
b1 Z
b1 c"
b1 H#
b1 G#
b0 .
b0 p"
b0 @#
b0 ?#
b1000 '"
b10010000000000000001 E#
b0 x
b10100 G
b10100 G"
b10100 J"
b1000010000100000000100000 X
b1000010000100000000100000 7"
b1000010000100000000100000 ["
b1000 %
b1000 r
b1000 )#
b1000 =#
b1010 1
b1010 O"
b1010 !#
b1001 $
b1001 u
b1001 (#
b1001 ;#
b1000 0
b1000 +"
b1000 ?"
b1000 D"
b1000 ~"
b1000 ,#
b101000 i
b101000 H"
b101000 0#
b1010 :
b1010 Q"
b1010 n"
b1000 /
b1000 t
b1000 y"
b101000000100101 Y
b101000000100101 ;"
b101000000100101 d"
b101000000100101 C#
bx -
bx @"
bx q"
b10100000010100000 j
b10100000010100000 $"
b10100000010100000 /#
b1100 >
b1100 &"
b1100 k"
0l
b10 o
b10 ""
b10 _"
16
b100000000010010000000000000001 W
b100000000010010000000000000001 \"
b10000 ?
b10000 Z"
b10000 j"
b10100 @
b10100 I"
b10100 X"
b10100 Y"
b10000 =
b10000 8"
b10000 T"
b10000 U"
b10000 V"
1!
#40
0!
#45
b10 e
b10 ."
b10 ^"
0d
1^
b10 p
b10 ("
b10 ,"
0m
17
b1 n
b1 ~
b1 +#
b0 D
b0 {
b0 #"
b0 C
b0 }
b0 A"
b11000 A
b11000 L"
b11000 S"
b100001000010000000010000000 T
b100001000010000000010000000 K"
b100001000010000000010000000 U
b100001000010000000010000000 F#
b11000 G
b11000 G"
b11000 J"
b1000010100101100000100101 X
b1000010100101100000100101 7"
b1000010100101100000100101 ["
b1000 m"
b1000 {"
b1000 x"
b100000000100000 Z
b100000000100000 c"
b100000000100000 H#
b100000000100000 G#
b1010 +
b1010 s"
b1010 B#
b1000 A#
b1010 .
b1010 p"
b1010 @#
b1000 ?#
b0 '"
b1000010000100000000100000 E#
b1000 y
b1000 x
b1 q
b1 |
b1 :"
b100 (
b100 %"
b100 D#
b1 !"
b1001 &
b1001 P"
b1001 :#
b1000 '
b1000 >"
b1000 C"
b1000 M"
b1000 >#
b10 E
b10 w
b10 B"
b0 F
b0 v
b0 ="
b11000 @
b11000 I"
b11000 X"
b11000 Y"
b10100 =
b10100 8"
b10100 T"
b10100 U"
b10100 V"
b10100 ?
b10100 Z"
b10100 j"
b1000010000100000000100000 W
b1000010000100000000100000 \"
06
b11 o
b11 ""
b11 _"
1l
b10100 j
b10100 $"
b10100 /#
b10000 >
b10000 &"
b10000 k"
b0 -
b0 @"
b0 q"
b1 Y
b1 ;"
b1 d"
b1 C#
b0 /
b0 t
b0 y"
b0 :
b0 Q"
b0 n"
b10100000010100000 i
b10100000010100000 H"
b10100000010100000 0#
b1010 0
b1010 +"
b1010 ?"
b1010 D"
b1010 ~"
b1010 ,#
b1010 $
b1010 u
b1010 (#
b1010 ;#
b1000 1
b1000 O"
b1000 !#
b1001 %
b1001 r
b1001 )#
b1001 =#
1!
#50
0!
#55
b1010 B
b1010 <"
b1010 F"
b10100 n
b10100 ~
b10100 +#
b1010 C
b1010 }
b1010 A"
b100001010010110000010010100 T
b100001010010110000010010100 K"
b100001010010110000010010100 U
b100001010010110000010010100 F#
b11100 A
b11100 L"
b11100 S"
b1010 '
b1010 >"
b1010 C"
b1010 M"
b1010 >#
b0 E
b0 w
b0 B"
b10000000010000000 (
b10000000010000000 %"
b10000000010000000 D#
b100000 !"
b1010 q
b1010 |
b1010 :"
b1000 &
b1000 P"
b1000 :#
b1011 m"
b1010 {"
b101100000100101 Z
b101100000100101 c"
b101100000100101 H#
b101100000100101 G#
bx +
bx s"
bx B#
b1010 A#
b1000010100101100000100101 E#
b1010 y
b11100 G
b11100 G"
b11100 J"
b0 X
b0 7"
b0 ["
b1010 %
b1010 r
b1010 )#
b1010 =#
b1010 1
b1010 O"
b1010 !#
b1001 $
b1001 u
b1001 (#
b1001 ;#
b1 0
b1 +"
b1 ?"
b1 D"
b1 ~"
b1 ,#
b10100 i
b10100 H"
b10100 0#
b1000 :
b1000 Q"
b1000 n"
b1000 ,
b1000 s
b1000 z
b1000 R"
b1000 |"
b1000 /
b1000 t
b1000 y"
b100000000100000 Y
b100000000100000 ;"
b100000000100000 d"
b100000000100000 C#
b1010 *
b1010 E"
b1010 t"
b1010 6#
b1010 -
b1010 @"
b1010 q"
b10000000010010100 j
b10000000010010100 $"
b10000000010010100 /#
b10100 >
b10100 &"
b10100 k"
0l
b10 o
b10 ""
b10 _"
16
b1000010100101100000100101 W
b1000010100101100000100101 \"
b11000 ?
b11000 Z"
b11000 j"
b11100 @
b11100 I"
b11100 X"
b11100 Y"
b11000 =
b11000 8"
b11000 T"
b11000 U"
b11000 V"
1!
#60
b1010 +
b1010 s"
b1010 B#
0!
#65
b11110 n
b11110 ~
b11110 +#
b101 D
b101 {
b101 #"
b10100 C
b10100 }
b10100 A"
b100000 A
b100000 L"
b100000 S"
b0 T
b0 K"
b0 U
b0 F#
b100000 G
b100000 G"
b100000 J"
b0 m"
b0 {"
b0 x"
b0 Z
b0 c"
b0 H#
b0 G#
b0 +
b0 s"
b0 B#
b0 A#
b0 .
b0 p"
b0 @#
b0 ?#
b0 E#
b0 y
b0 x
b10110000010010100 (
b10110000010010100 %"
b10110000010010100 D#
b100101 !"
b1011 &
b1011 P"
b1011 :#
b1 '
b1 >"
b1 C"
b1 M"
b1 >#
b1 F
b1 v
b1 ="
b100000 @
b100000 I"
b100000 X"
b100000 Y"
b11100 =
b11100 8"
b11100 T"
b11100 U"
b11100 V"
b11100 ?
b11100 Z"
b11100 j"
b0 W
b0 \"
b10110000010101100 j
b10110000010101100 $"
b10110000010101100 /#
b11000 >
b11000 &"
b11000 k"
b101100000100101 Y
b101100000100101 ;"
b101100000100101 d"
b101100000100101 C#
b1010 ,
b1010 s
b1010 z
b1010 R"
b1010 |"
b1011 :
b1011 Q"
b1011 n"
b10000000010010100 i
b10000000010010100 H"
b10000000010010100 0#
b10100 0
b10100 +"
b10100 ?"
b10100 D"
b10100 ~"
b10100 ,#
b1010 )
b1010 )"
b1010 7#
b1000 $
b1000 u
b1000 (#
b1000 ;#
b1 1
b1 O"
b1 !#
b1001 %
b1001 r
b1001 )#
b1001 =#
1!
#70
0!
#75
1#
b0 n
b0 ~
b0 +#
b0 q
b0 |
b0 :"
b0 D
b0 {
b0 #"
b0 B
b0 <"
b0 F"
b0 C
b0 }
b0 A"
b100100 A
b100100 L"
b100100 S"
b10100 '
b10100 >"
b10100 C"
b10100 M"
b10100 >#
b0 &
b0 P"
b0 :#
b0 F
b0 v
b0 ="
b0 (
b0 %"
b0 D#
b0 !"
b100100 G
b100100 G"
b100100 J"
b1000 %
b1000 r
b1000 )#
b1000 =#
b10100 1
b10100 O"
b10100 !#
b1011 $
b1011 u
b1011 (#
b1011 ;#
b11110 0
b11110 +"
b11110 ?"
b11110 D"
b11110 ~"
b11110 ,#
b10110000010101100 i
b10110000010101100 H"
b10110000010101100 0#
b0 :
b0 Q"
b0 n"
b0 ,
b0 s
b0 z
b0 R"
b0 |"
b0 /
b0 t
b0 y"
b0 Y
b0 ;"
b0 d"
b0 C#
b0 *
b0 E"
b0 t"
b0 6#
b0 -
b0 @"
b0 q"
b11100 j
b11100 $"
b11100 /#
b11100 >
b11100 &"
b11100 k"
b100000 ?
b100000 Z"
b100000 j"
b100100 @
b100100 I"
b100100 X"
b100100 Y"
b100000 =
b100000 8"
b100000 T"
b100000 U"
b100000 V"
1!
#80
0!
#85
b101000 A
b101000 L"
b101000 S"
b101000 G
b101000 G"
b101000 J"
b11110 '
b11110 >"
b11110 C"
b11110 M"
b11110 >#
b101000 @
b101000 I"
b101000 X"
b101000 Y"
b100100 =
b100100 8"
b100100 T"
b100100 U"
b100100 V"
b100100 ?
b100100 Z"
b100100 j"
b100000 j
b100000 $"
b100000 /#
b100000 >
b100000 &"
b100000 k"
b11100 i
b11100 H"
b11100 0#
1"
b0 0
b0 +"
b0 ?"
b0 D"
b0 ~"
b0 ,#
b0 )
b0 )"
b0 7#
b0 $
b0 u
b0 (#
b0 ;#
b11110 1
b11110 O"
b11110 !#
b1011 %
b1011 r
b1011 )#
b1011 =#
1!
#90
0!
#95
b101100 A
b101100 L"
b101100 S"
b0 '
b0 >"
b0 C"
b0 M"
b0 >#
b101100 G
b101100 G"
b101100 J"
b0 %
b0 r
b0 )#
b0 =#
b0 1
b0 O"
b0 !#
b100000 i
b100000 H"
b100000 0#
b100100 j
b100100 $"
b100100 /#
b100100 >
b100100 &"
b100100 k"
b101000 ?
b101000 Z"
b101000 j"
b101100 @
b101100 I"
b101100 X"
b101100 Y"
b101000 =
b101000 8"
b101000 T"
b101000 U"
b101000 V"
1!
#100
0!
#105
b110000 A
b110000 L"
b110000 S"
b110000 G
b110000 G"
b110000 J"
b110000 @
b110000 I"
b110000 X"
b110000 Y"
b101100 =
b101100 8"
b101100 T"
b101100 U"
b101100 V"
b101100 ?
b101100 Z"
b101100 j"
b101000 j
b101000 $"
b101000 /#
b101000 >
b101000 &"
b101000 k"
b100100 i
b100100 H"
b100100 0#
1!
#110
0!
#115
b110100 A
b110100 L"
b110100 S"
b110100 G
b110100 G"
b110100 J"
b101000 i
b101000 H"
b101000 0#
b101100 j
b101100 $"
b101100 /#
b101100 >
b101100 &"
b101100 k"
b110000 ?
b110000 Z"
b110000 j"
b110100 @
b110100 I"
b110100 X"
b110100 Y"
b110000 =
b110000 8"
b110000 T"
b110000 U"
b110000 V"
1!
#120
0!
#125
b111000 A
b111000 L"
b111000 S"
b111000 G
b111000 G"
b111000 J"
b111000 @
b111000 I"
b111000 X"
b111000 Y"
b110100 =
b110100 8"
b110100 T"
b110100 U"
b110100 V"
b110100 ?
b110100 Z"
b110100 j"
b110000 j
b110000 $"
b110000 /#
b110000 >
b110000 &"
b110000 k"
b101100 i
b101100 H"
b101100 0#
1!
#130
0!
#135
b111100 A
b111100 L"
b111100 S"
b111100 G
b111100 G"
b111100 J"
b110000 i
b110000 H"
b110000 0#
b110100 j
b110100 $"
b110100 /#
b110100 >
b110100 &"
b110100 k"
b111000 ?
b111000 Z"
b111000 j"
b111100 @
b111100 I"
b111100 X"
b111100 Y"
b111000 =
b111000 8"
b111000 T"
b111000 U"
b111000 V"
1!
#140
0!
#145
b1000000 A
b1000000 L"
b1000000 S"
b1000000 G
b1000000 G"
b1000000 J"
b1000000 @
b1000000 I"
b1000000 X"
b1000000 Y"
b111100 =
b111100 8"
b111100 T"
b111100 U"
b111100 V"
b111100 ?
b111100 Z"
b111100 j"
b111000 j
b111000 $"
b111000 /#
b111000 >
b111000 &"
b111000 k"
b110100 i
b110100 H"
b110100 0#
1!
#150
0!
#155
b1000100 A
b1000100 L"
b1000100 S"
b1000100 G
b1000100 G"
b1000100 J"
b111000 i
b111000 H"
b111000 0#
b111100 j
b111100 $"
b111100 /#
b111100 >
b111100 &"
b111100 k"
b1000000 ?
b1000000 Z"
b1000000 j"
b1000100 @
b1000100 I"
b1000100 X"
b1000100 Y"
b1000000 =
b1000000 8"
b1000000 T"
b1000000 U"
b1000000 V"
1!
#160
0!
#165
b1001000 A
b1001000 L"
b1001000 S"
b1001000 G
b1001000 G"
b1001000 J"
b1001000 @
b1001000 I"
b1001000 X"
b1001000 Y"
b1000100 =
b1000100 8"
b1000100 T"
b1000100 U"
b1000100 V"
b1000100 ?
b1000100 Z"
b1000100 j"
b1000000 j
b1000000 $"
b1000000 /#
b1000000 >
b1000000 &"
b1000000 k"
b111100 i
b111100 H"
b111100 0#
1!
#170
0!
